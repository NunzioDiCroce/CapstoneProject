package com.example.FastOutBackEnd.services;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.example.FastOutBackEnd.entities.Platform;
import com.example.FastOutBackEnd.enums.CustomerType;
import com.example.FastOutBackEnd.exceptions.NotFoundException;
import com.example.FastOutBackEnd.payloads.UpdatePlatformPayload;
import com.example.FastOutBackEnd.repositories.PlatformRepository;

import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;

@Service
public class PlatformService {
	
	@Autowired
	private PlatformRepository platformRepository;
	
	// save Platform
	public Platform savePlatform(Platform platform) {
		return platformRepository.save(platform);
	}
	
	// find all Platforms
	public List<Platform> getAllPlatforms() {
		return platformRepository.findAll();
	}
	
	// find all Platforms pagination
	public Page<Platform> find(int page, int size, String sort) {
		Pageable pag = PageRequest.of(page, size, Sort.by(sort));
		
		return platformRepository.findAll(pag);
	}
	
	// get by id Platform
	public Platform getPlatformByID(UUID id) {
		Optional<Platform> found = platformRepository.findById(id);
		
		return found.orElseThrow(() -> new NotFoundException("Platform with " + id + "not found."));
	}
	
	// update by id Platform
	public Platform updatePlatform(UUID id, UpdatePlatformPayload body) {
		Platform found = getPlatformByID(id);
		
		found.setLocation(body.getLocation());
		found.setRagioneSociale(body.getRagioneSociale());


		return platformRepository.save(found);
		
		private String location;
		
		@Enumerated(EnumType.STRING)
		private CustomerType customerType;
		
		private BigDecimal parcelsPerMonth;
		private BigDecimal parcelRate;
	}

}
